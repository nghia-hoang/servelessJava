service: products-api

provider:
  name: aws
  runtime: java11
  profile: serverless-admin
  region: us-east-1
  stage: dev
  logs:
   enable: true
   level: info
iam:
  role: my-serverless-role
  policyStatements:
  - Effect: "Allow"
    Action: ["DynamoDB:CreateTable"]
    Resource: "*"  
 # Insert the DynamoDB configuration here:
#  dynamodb:
#    stages:
#      - dev  # Specify the stage(s) for DynamoDB Local
#    start:
#      port: 8000
#      migrate: true
#      seed: true
# you can overwrite defaults here
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  artifact: target/products-api-dev.jar

functions:
  listProducts:
    handler: com.serverless.Handler
    events:
      - http:
          path: hello/product
          method: get
          cors: true
    logging:
      provider: aws
      logGroup: list 
 
#functions:
#  hello:
#    handler: com.serverless.Handler
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

resources: # CloudFormation template syntax
  Resources:
    Music2:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Music2
        AttributeDefinitions:
          - AttributeName: Artistw
            AttributeType: S
        KeySchema:
          - AttributeName: Artistw
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
plugins:
  - serverless-dynamodb
  - serverless-dynamodb-local
  - serverless-offline
#  - serverless-logger
custom:
  serverless-dynamodb:
    start:
      port: 8000
      docker: false      

